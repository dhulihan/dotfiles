" Startup Vundle
set nocompatible              " be iMproved, required
filetype off                  " required


" load fzf from git
set rtp+=~/.fzf

" add rtp path for custom syntax, functions, etc.
set rtp+=~/.vim-dotfiles

" Pre-plugin config
" notational-fzf-vim ##########################################################
"let g:nv_search_paths = ['~/Notes']
"let g:nv_show_preview = 1
" notational-fzf-vim END #######################################################

" load sensitive vim components
if filereadable(expand("~/.private.vim"))
  source ~/.private.vim
endif

if (has('termguicolors'))
  set termguicolors
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
else
  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim

  call plug#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " System
  Plug 'benmills/vimux'

  " Vim itself
  Plug 'mhinz/vim-startify'
  Plug 'jeanCarloMachado/vim-toop'
  "Plug 'Yggdroot/indentLine' " don't need this, use list
  "Plug 'machakann/vim-highlightedyank' " cool but annoying after a while
  "Plug 'chrisbra/Recover.vim'
  Plug 'inkarkat/vim-CompleteHelper'
  "Plug 'unblevable/quick-scope' " cool but I don't use much

  " Version Control
  Plug 'tpope/vim-fugitive'
  "Plug 'junegunn/gv.vim' " not needed
  "Plug 'junkblocker/git-time-lapse' " using :0Gclog instead
  Plug 'tpope/vim-rhubarb'
  "Plug 'airblade/vim-gitgutter' " performance issues 2021-08-24, try to update

  " General Syntax
  "Plug 'jiangmiao/auto-pairs'
  Plug 'tpope/vim-endwise'
  "Plug 'tpope/vim-surround'
  "Plug 'tpope/vim-repeat'
  "Plug 'Valloric/YouCompleteMe' " no ruby support, gocode is better for go, slow
  Plug 'preservim/nerdcommenter'
  "Plug 'ludovicchabant/vim-gutentags' " blocking too much
  Plug 'vitalk/vim-shebang'
  " Plug 'junegunn/vim-easy-align' " TODO: fix = mapping
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'prettier/vim-prettier', {
    \ 'do': 'yarn install',
    \ 'branch': 'release/1.x',
    \ 'for': [
    \   'javascript'
    \ ] }
  Plug 'rhysd/clever-f.vim'
  Plug 'bogado/file-line' " open file:line
  " Plug 'vim-test/vim-test' " not needed
  " Plug 'wellle/context.vim' " cool but slow
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'yssl/QFEnter' " quickfix helpers
  "Plug 'glts/vim-radical' " not using this much atm

  " Language-specific
  "Plug 'stamblerre/gocode' " trouble getting this to work
  "Plug 'fatih/vim-go' " gopls issues
  Plug 'sebdah/vim-delve'
  " ^ spinning up a gopls server for every vim session
  "Plug 'robbles/logstash.vim'
  Plug 'hashivim/vim-terraform'
  "Plug 'tpope/vim-cucumber'
  "Plug 'elubow/cql-vim'
  Plug 'ekalinin/Dockerfile.vim'
  Plug 'cespare/vim-toml'
  Plug 'plasticboy/vim-markdown'
  Plug 'iamcco/markdown-preview.nvim' " :call mkdp#util#install() afterwards
  Plug 'img-paste-devs/img-paste.vim'
  "Plug 'jparise/vim-graphql'
  "Plug 'rmelcer/vim-icinga'
  "Plug 'skreuzer/vim-prometheus'
  "Plug 'Glench/Vim-Jinja2-Syntax'
  "Plug 'wannesm/wmgraphviz.vim'
  "Plug 'elixir-lang/vim-elixir' " not using elixir right now
  "Plug 'tpope/vim-rails'
  "Plug 'gabrielelana/vim-markdown'
  "Plug 'shime/vim-livedown'
  "Plug 'JamshedVesuna/vim-markdown-preview'
  " Plug 'amiorin/vim-fenced-code-blocks' " does not support indentation
  " Plug 'rhysd/vim-gfm-syntax' " cute but not needed
  Plug 'chrisbra/csv.vim'
  "Plug 'mhinz/vim-rfc' " cool but not working well, requires vim ruby
  Plug 'dhulihan/vim-rfc'
  Plug 'kamailio/vim-kamailio-syntax'
  "Plug 'vim-ruby/vim-ruby' " careful, possibly slow
  "Plug 'tpope/vim-rbenv' " supposed to work with recent vim-ruby
  Plug 'bufbuild/vim-buf'
  Plug 'trayo/vim-ginkgo-snippets'
  Plug 'buoto/gotests-vim'
  Plug 'mracos/mermaid.vim'
  Plug 'direnv/direnv.vim'

  " Lint
  Plug 'w0rp/ale'
  "Plug 'vim-syntastic/syntastic'
  Plug 'maximbaz/lightline-ale'

  " Utility
  Plug 'tpope/tpope-vim-abolish'
  Plug 'mileszs/ack.vim'
  Plug 'jremmen/vim-ripgrep'
  "Plug 'Rename2' " using eunuch's rename
  Plug 'tpope/vim-eunuch'
  "Plug 'scrooloose/nerdtree'
  Plug 'tmhedberg/matchit'
  "Plug 'vim-scripts/ruby-matchit'
  "Plug 'ctrlpvim/ctrlp.vim'
  "Plug 'mtth/scratch.vim'
  "Plug 'vim-scripts/SearchComplete'
  Plug 'junegunn/fzf.vim'
  Plug 'stsewd/fzf-checkout.vim'
  "Plug 'ronakg/quickr-preview.vim'
  "Plug 'alok/notational-fzf-vim'
  Plug 'dhulihan/vim-gtfo'
  "Plug 'romainl/vim-cool' " cool but sometimes buggy

  " Colors
  Plug 'flazz/vim-colorschemes' " note: not working in nvim, need to fix
  "Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
  Plug 'fenetikm/falcon'
  Plug 'guns/xterm-color-table.vim'
  "Plug 'vim-airline/vim-airline-themes'

  " Files & Buffers
  "Plug 'jeetsukumaran/vim-buffergator'
  Plug 'ton/vim-bufsurf'
  Plug 'qpkorr/vim-bufkill'
  Plug 'gcmt/taboo.vim'
  "Plug 'danro/rename.vim'
  "Plug 'fholgado/minibufexpl.vim'

  " Layout
  "Plug 'bling/vim-airline'
  Plug 'itchyny/lightline.vim'
  Plug 'godlygeek/tabular'
  Plug 'tyru/open-browser.vim'
  "Plug 'wincent/command-t'
  "Plug 'vim-scripts/EasyGrep'
  "Plug 'editorconfig/editorconfig-vim.git' " not using atm
  "Plug 'xolox/vim-misc'
  "Plug 'xolox/vim-easytags'
  Plug 'majutsushi/tagbar'

  " Build
  Plug 'tpope/vim-dispatch'

  Plug 'ryanoasis/vim-devicons' " add font glyph icons to popular plugins
  call plug#end()            " required
  filetype plugin indent on    " required
endif

" Line Numbers
set number

" show as much of a line as possible
set display+=lastline

" Recognize dash-separated values as words
set iskeyword+=-

" use number column for signs, to save on space
set signcolumn=number

" hide modified buffers instead of closing them
set hidden

" Split windows to the right and bottom for horz/vert
set splitright
set splitbelow

" vertical diff columns
set diffopt=vertical,filler

"make sure to escape the spaces in the name properly
"set guifont=Source\ Code\ Pro\ for\ Powerline

" Registers  -----------------------------------------------------------------
" copy unnamed register to clipboard in macvim/gvim
"set clipboard=unnamed

" Registers END  -------------------------------------------------------------

" File Types & Indentation ---------------------------------------------------
set cindent
set smartindent
set autoindent

" Don't use spaces for tabs
"set noexpandtab

" Show tabs as 4 cols
"set tabstop=4
"set shiftwidth=4
"set softtabstop=4

" spelling -------------------------------------------------------------------
" First entry is for public things, Second is for secret/confidential terms
" (eg: internal business, etc.)
" use `1zg`, or `2zg`, etc.
"
" TODO: reenable. currently busted, see: https://github.com/vim/vim/issues/7068
set spellfile=$HOME/.en.utf-8.add,$HOME/.en-secret.utf-8.add
" spelling END ---------------------------------------------------------------

augroup filetypes
  autocmd!
  autocmd BufNewFile,BufRead *.template set filetype=json
  autocmd BufNewFile,BufRead *.json.tmpl, *.js.symlink set filetype=json
  autocmd BufNewFile,BufRead *.yaml.dockercompose,*.yaml.tmpl set filetype=yaml
  autocmd BufNewFile,BufRead .envrc set filetype=sh

  " filetype-specific config
  autocmd Filetype noft setlocal number
  autocmd Filetype markdown setlocal spell noexpandtab
  autocmd Filetype terraform,proto setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
  autocmd Filetype ruby setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2 autoindent smartindent
  autocmd Filetype docker-compose setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
  autocmd Filetype logstash setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
  autocmd Filetype groovy,sql setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
  autocmd Filetype go setlocal tabstop=4 shiftwidth=4
  autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType kamailio setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType lua setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sh setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType vim setlocal ts=2 sts=2 sw=2 expandtab textwidth=80
  autocmd FileType xml setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab

  " Open md files with system tool
  autocmd FileType html let b:dispatch = "open '%'"
  autocmd FileType markdown let b:dispatch = "open '%'"
  autocmd FileType sh let b:dispatch = "'%'"
  autocmd FileType go let b:dispatch = "go run '%'"
augroup END

" better tab completion of filepaths
set wildmenu
set wildmode=longest:full,full

" File Types & Indentation END -----------------------------------------------

" Pretty invisibles
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

" Use the same symbols as TextMate for tabstops and EOLs
"set listchars=tab:▸\ ,eol:¬

" Highlight one or more trailing spaces
" syntax match Error "\s\{2}$"

" disable bells
set noerrorbells visualbell t_vb=

" Persist undos
"set undodir=$HOME/.vim/undo " mkdir this if you need to
"set undofile " Maintain undo history between sessions

" Persist cursor
augroup persist_cursor
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

" General Key Mappings
"     ________________________________
"    /    o   oooo ooo oooo   o o o  /\
"   /    oo  ooo  oo  oooo   o o o  / /
"  /    _________________________  / /
" / // / // /// // /// // /// / / / /
"/___ //////////////////////////_/ /
"\____\________________________\_\/
"
" make C-C esc for InsertLeave, etc (insert)
ino <C-C> <Esc>

" beginning/end of line, shell style (insert)
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I

" save file
inoremap <C-s> <Esc>:w<cr>
noremap <C-s> :w<cr>

" command mode word operations, shell style
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right><Right>
cnoremap <Esc>d <S-Right><C-w><Del>

" paste from system clipboard
inoremap <C-Space> <C-r><C-o>*

" #!! - shebang helper for current filetype (junegunn)
inoreabbrev <expr> #!! "#!/usr/bin/env" . (empty(&filetype) ? '' : ' '.&filetype)

" Easier saving
"nnoremap S :w<CR>
"nnoremap <C-i> :q<CR>
"
" widen split to favorite width (I like 80 char width plus some gutter)
nnoremap <C-W>\ :vertical resize 82<CR>

" Classic backspace
"nnoremap <BS> X

" keywordprg doesn't allow to use vim commands, override it
nnoremap <buffer> <silent> K :GoDoc<cr>

" Tabs
nnoremap { :cprev<CR>
nnoremap } :cnext<CR>
nnoremap = :tabn<CR>
nnoremap - :tabp<CR>
nnoremap _ :tabm -1<CR>
nnoremap + :tabm +1<CR>
"nnoremap ( :tabclose<CR>
"nnoremap ) :tabnew<CR>

" Map ctrl+return to auto/smart indent
imap <C-Return> <CR><CR><C-o>k<Tab>

" lazy indent
"nnoremap <Tab> >>
"nnoremap <S-Tab> <<
"imap <S-Tab> <Esc><<i

" Map insert abnormals. Must be typed quickly!
" imap wq <Esc>:wq<CR>
" imap ww <Esc>:w<CR>i

" Visual Mode mappings

" In visual mode, make indent/unindent reselect after indent
"vmap <TAB> >gv
"vmap <S-TAB> <gv

" easier visual mode replace
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" like . but for visual mode
vnoremap . :normal .<CR>

" select pasted text
nnoremap gp `[v`]

" :terminal Mappings
tnoremap <PageUp> <C-W>N<PageUp>
tnoremap <PageDown> <C-W>N<PageDown>

" Leader Key Mappings
"      ____________
"     /\  ________ \
"    /  \ \______/\ \
"   / /\ \ \  / /\ \ \
"  / / /\ \ \/ / /\ \ \
" / / /__\_\/ / /__\_\ \
"/ /_/_______/ /________\
"\ \ \______ \ \______  /
" \ \ \  / /\ \ \  / / /
"  \ \ \/ / /\ \ \/ / /
"   \ \/ / /__\_\/ / /
"    \  / /______\/ /
"     \/___________/
"
nnoremap <Leader>s :BufSurfForward<CR>
nnoremap <Leader>a :BufSurfBack<CR>
nnoremap <silent> <leader>e :ToggleNetrw<CR>
nnoremap <Leader>t :TagbarToggle<cr>
nnoremap <Leader>d :BD<CR>
nnoremap <Leader>x :Dispatch<CR>
nnoremap <Leader><tab> :Cdp<Space>

" super literal, case insentive grep search. supports `--foo`
nnoremap <Leader><Enter> :Rg -F -i -- ""<Left>
"nnoremap <Tab> :bnext<CR>
"nnoremap <S-Tab> :bprevious<CR>
" open new buffer with name from inner parens
nnoremap <Leader>1 :DlvToggleBreakpoint<CR>
nnoremap <Leader>2 :DlvTest<CR>
nnoremap <Leader>4 :normal si(<CR>
" copy current file path to clipboard
nnoremap <Leader>5 :RelPathToClipboard<CR>
nnoremap <Leader>6 :RelDirToClipboard<CR>
" Shortcut to rapidly toggle `set list`. Moved to F2.
nnoremap <Leader>l :set list!<CR>
"nnoremap <Leader>; :ColorColumnToggle<CR>
nnoremap <Leader>] :ALENext -wrap -error<CR>
nnoremap <Leader>[ :ALEPrevious -wrap -error<CR>
nnoremap <Leader>= :ALENext -wrap -warning<CR>
nnoremap <Leader>- :ALEPrevious -wrap -warning<CR>
nnoremap <Leader><Leader> :ToggleQuickFix<CR>
"nnoremap <Leader>' :ToggleQuickFix<CR>
" folding
nnoremap <Leader>, zr<CR>
nnoremap <Leader>. zm<CR>
" git
nnoremap <Leader>gg :.GBrowse!<CR>
"nnoremap <Leader>gg :GitPrimaryURL<CR>
nnoremap <Leader>gb :GBranches<CR>
"nnoremap <Leader>gc :.GBrowse!<CR>
nnoremap <Leader>gx :.GBrowse<CR>
nnoremap <Leader>gm :GBrowse @origin<CR>
nnoremap <Leader>ge :GEdit master:%<CR>
nnoremap <Leader>vv :Rg<CR>
" yanks
nnoremap <Leader>yb :CopyBufferToClipboard<CR>
"nnoremap <Leader>yyy "*y<CR>
"vnoremap <Leader>yyy "*y<CR>
"nnoremap <Leader>ppp "*p<CR>
"vnoremap <Leader>ppp "*p<CR>
"nnoremap <Leader>PPP "*P<CR>
"vnoremap <Leader>PPP "*P<CR>

" F Keys
" ███████╗
" ██╔════╝
" █████╗░░
" ██╔══╝░░
" ██║░░░░░
" ╚═╝░░░░░
"
" open a terminal to pwd
nnoremap <F1> :terminal<cr>

" Paste mode toggle
"nnoremap <F2> :set invpaste paste?<CR>
"imap <F2> <C-O>:set invpaste paste?<CR>
nnoremap <F2> :ALEFix<CR>
imap <F2> <C-O>:ALEFix<CR>
"set pastetoggle=<F2>

" number mode toggle
"noremap <F3> :set invnumber<CR>
"inoremap <F3> <C-O>:set invnumber<CR>

" Save search matches in separate file
noremap <silent> <F4> :ColorColumnToggle<CR>
inoremap <silent> <F4> <C-O>:ColorColumnToggle<CR>

" reload buffer
noremap <F5> :e!<CR>
inoremap <F5> <C-O>:e!<CR>

" reload vim config
noremap <F6> :Reload<CR>
inoremap <F6> <C-O>:Reload<CR>

noremap <F7> :GblameToggle<CR>
inoremap <F7> :GblameToggle<CR>

noremap <F8> :0Gclog<CR>
inoremap <F8> :0Gclog<CR>
"noremap <F8> :GitTimeLapse<CR>
"inoremap <F8> :GitTimeLapse<CR>

noremap <F9> :CopyBufferToClipboard<CR>
inoremap <F9> <C-O>:CopyBufferToClipboard<CR>
" open tag in vertical split
"noremap <F9> :exec "vert norm <C-V><C-W>f"<CR>
"inoremap <F9> <C-O>:exec "vert norm <C-V><C-W>f"<CR>

" start at beginning of line
noremap <F10> ^"*y$

" for visual block mode, go to end of line
vnoremap <F10> $"*y<CR>

" TODO: this needs some love
inoremap <F10> <C-o>^"*y<CR>

" put from clipboard and adjust indent to match current line
noremap <F11> "*]p
vnoremap <F11> "*]p
cnoremap <F11> <C-R><C-0>*
inoremap <F11> <C-R><C-P>*

noremap <F12> :ZoomToggle<CR>
inoremap <F12> <C-O>:ZoomToggle<CR>

" Space Key Mappings
" ░░░░░░░░░░░░░░░░░
" ░░░░░▀▄░░░▄▀░░░░░
" ░░░░▄█▀███▀█▄░░░░
" ░░░█▀███████▀█░░░
" ░░░█░█▀▀▀▀▀█░█░░░
" ░░░░░░▀▀░▀▀░░░░░░
" ░░░░░░░░░░░░░░░░░
" map leader to spacebar
"let mapleader=" "
" map <space> <Leader>

" disable space cursor movement
nnoremap <Space> <NOP>

" single character space commands
nnoremap <space>5 :AbsPathToClipboard<CR>
nnoremap <space>6 :AbsDirToClipboard<CR>
nnoremap <space>7 :OpenDirInFileBrowser<CR>
nnoremap <space>l :lnext<CR>
nnoremap <space>p :lprevious<CR>
nnoremap <space>r :lrewind<CR>

" git things
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gh :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gl :GitTimeLapse<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>

" debuggy things
nnoremap <space>db :DlvToggleBreakpoint<CR>
nnoremap <space>dx :DlvToggleTracepoint<CR>
nnoremap <space>dt :DlvTest<CR>
nnoremap <space>dd :DlvDebug<CR>
nnoremap <space>dc :DlvClearAll<CR>

" system clipboard helpers
"nnoremap <Space>yy "*yy<CR>
"nnoremap <Space>dd "*dd<CR>
"nnoremap <Space>C "*C<CR>
"nnoremap <Space>p "*p<CR>
"nnoremap <Space>P "*P<CR>
"vnoremap <Space>y "*y<CR>
"vnoremap <Space>d "*d<CR>
"vnoremap <Space>c "*c<CR>
"vnoremap <Space>p "*p<CR>
"vnoremap <Space>P "*P<CR>

" Backspace (BS) Keys
"                  ______
"                  \     \.
"                  |`\_____\
"                  |` |    |
"     __-====-__   |  |    |
"    (~<       >~>_|  |    |
"    {~~-====--~~:  \ |    |
"    !~~------~~/----`+----/
"     \         \___     /
"      >------\     \  <
"     <_________________>

" disable space cursor movement
nnoremap <BS> <NOP>

" git things
nnoremap <BS>gl :GitTimeLapse<CR>
nnoremap <BS>= zm
nnoremap <BS>- zr

" Visuals
set cinkeys=0{,0},:,0#,!^F
"set colorcolumn=80

" visual indicator for insert mode
"augroup InsertColors
	"au InsertEnter * colors dracula | AirlineRefresh
	"au InsertLeave * colors molokai | AirlineRefresh
"augroup END

" map buffer movement (normal)

imap qq <Esc>:LocalDate<CR>a
imap jj <Esc>:LocalTime<CR>a
imap kk <Esc>:UTCTime<CR>a
"imap yyy <Esc>"*y<CR>a
"imap ppp <C-R><C-O>*

" mouse mode
set mouse=a

" tmux mousefix
"if &term =~ '^screen'
    " tmux knows the extended mouse mode
    "set ttymouse=xterm2
"endif

" enable sgr mousemode to support wide terminal columns
if has('mouse_sgr')
    set ttymouse=sgr
endif

" Smooth scroll
"map <ScrollWheelUp> <C-Y>
"map <ScrollWheelDown> <C-E>

" enable project rc
set exrc

" highlight match without moving cursor, jumps forward, then back
nnoremap * *``

" search highlighting
set hlsearch

" enable shortmess (number of matches)
set shortmess-=S

" incremental search
"set incsearch


" Syntax Highlighting on
syntax on

" ignore these things
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,.*.sw*

" command-line ----------------------------------------------------------------
"
" start of line
cnoremap <C-A>		<Home>
" back one character
cnoremap <C-B>		<Left>
" delete character under cursor
cnoremap <C-D>		<Del>
" end of line
cnoremap <C-E>		<End>
" forward one character
cnoremap <C-F>		<Right>
" recall newer command-line
cnoremap <C-N>		<Down>
" recall previous (older) command-line
cnoremap <C-P>		<Up>

" command-line END ------------------------------------------------------------

" ------------------------------------------------------------------------------
" netrw/Explorer
" ------------------------------------------------------------------------------
let g:netrw_preview = 1 " preview file vertical split
let g:netrw_banner = 0
" 0 - thin listing (one file per line)
" 1 - long listing (one file per line with timestamp information and file size)
" 2 - wide listing (multiple files in columns)
" 3 - tree style listing
let g:netrw_liststyle = 3
" 1 - open files in a new horizontal split
" 2 - open files in a new vertical split
" 3 - open files in a new tab
" 4 - open in previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1 "change from left splitting to right splitting
let g:netrw_winsize = 25

" fix gx bug, see https://github.com/vim/vim/issues/4738
let g:netrw_nogx=1
if has('macunix')
  function! OpenURLUnderCursor()
    let s:uri = matchstr(getline('.'), '[a-z]*:\/\/[^ >,;()]*')
    let s:uri = shellescape(s:uri, 1)
    if s:uri != ''
      exec "!open '".s:uri."'"
      :redraw!
    endif
  endfunction
  nnoremap gx :call OpenURLUnderCursor()<CR>
endif

" Grep and friends -------------------------------------------------------------
set grepprg=rg\ --vimgrep
let g:ackprg='rg --vimgrep'
" ------------------------------------------------------------------------------

" taboo ------------------------------------------------------------------------

" aliases
cnoreabbrev TR TabooRename
" taboo END --------------------------------------------------------------------
"
" tagbar -----------------------------------------------------------------------
let g:tagbar_width=26 " Default is 40, seems too wide
" tagbar END -------------------------------------------------------------------

" easyclip ---------------------------------------------------------------------

" disable black hole deletes
let g:EasyClipEnableBlackHoleRedirect = 0

" disable weird paste
let g:EasyClipUsePasteDefaults = 0

" turn on `s` text-object motion/selection, eg: `siw`
nnoremap gm m
let g:EasyClipUseSubstituteDefaults = 1

" use <CTRL-F> and <CTRL-F> for movement
"let g:EasyClipUsePasteToggleDefaults = 0
"nnoremap <c-f> <plug>EasyClipSwapPasteForward
"nnoremap <c-d> <plug>EasyClipSwapPasteBackwards

" move cursor to end of paste
"let g:EasyClipAlwaysMoveCursorToEndOfPaste=1

" Automatically format/indent text after pasting
" breaks markdown fenced indentation
"let g:EasyClipAutoFormat=1

" use this to view original formatting
"nnoremap <leader>cf <plug>EasyClipToggleFormattedPaste

" Turn on paste mode for duration of the paste
"imap <c-v> <plug>EasyClipInsertModePaste

" Command Mode Paste
"cmap <c-v> <plug>EasyClipCommandModePaste

" share yanks in text file, shareable between vims (warning slow)
let g:EasyClipShareYanks=0

" END easyclip ---------------------------------------------------------------

" gutentags -------------------------------------------------
"autocmd User GutentagsUpdating unsilent echo "Gutentagging..."
"autocmd User GutentagsUpdated unsilent echo "Gutentagged!"
"autocmd User GutentagsUpdating call lightline#update()
"autocmd User GutentagsUpdated call lightline#update()
" gutentags END ---------------------------------------------

" Airline ----------------------------------------------------
"
" enable/disable tabline
"   if disabled, will show buffers when only one tab open
"let g:airline#extensions#tabline#enabled = 0

" enable/disable buffer line
"let g:airline#extensions#bufferline#enabled = 0

" use powerline glyphs for symbols
"let g:airline_powerline_fonts = 1

" show all the time, not just on splits
"set laststatus=2
"let g:airline#extensions#wordcount#enabled = 0 " disable word count
"let g:airline_section_y = 0 " show nothing in encoding section
"let g:airline#extensions#tabline#buffer_nr_show = 0 " show buffer numbers
"let g:airline#extensions#tabline#fnametruncate = 0 " truncate non-active filenames
"let g:airline#extensions#tabline#fnamemod = ':p:t' " show only filename, see filename-modifiers for more

" Enable index select
"let g:airline#extensions#tabline#buffer_idx_mode = 1

" Airline Theme
"AirlineTheme wombat
"AirlineTheme bubblegum
"AirlineTheme tomorrow
"AirlineTheme jellybeans
"AirlineTheme luna
"AirlineTheme hybrid

" Airline END -----------------------------------------------

" tpope/vim-markdown ----------------------------------------
let g:markdown_gfm_languages = ["ruby", "erb=eruby"]

" tpope/vim-markdown END ------------------------------------

" tpope/vim-dispatch ----------------------------------------

" tpope/vim-dispatch END ------------------------------------

" plasticboy/vim-markdown -----------------------------------
let g:vim_markdown_fenced_languages = [
\'bash=sh',
\'envrc=sh',
\'erb=eruby',
\'rb=ruby',
\'js=javascript',
\'json=javascript',
\'ruby',
\'rb=ruby',
\'sass',
\'xml',
\'ex=elixir',
\'yml=yaml',
\'gql=graphql',
\'py=python',
\'hcl=terraform',
\'prom=prometheus',
\'kam=kamailio',
\]

let g:vim_markdown_auto_insert_bullets = 1

" save any edits you made before moving you to linked file
let g:vim_markdown_autowrite = 1
" plasticboy/vim-markdown END -------------------------------

" markdown-preview -----------------------------------
let g:mkdp_theme = 'light'
" markdown-preview END -------------------------------

" img-paste --------------------------------------------------------------------
let g:mdip_imgdir = '.' " store in same dir as md file
" img-paste END ----------------------------------------------------------------

" jiangmiao/auto-pairs --------------------------------------

" turn off indenter. Does not play nicely with fenced markdown blocks
let g:AutoPairsMapCR = 0

" turn this off in most cases
"let g:AutoPairs = {}

" backticks in markdown
"autocmd FileType markdown let g:AutoPairs = { '`':'`'}
" jiangmiao/auto-pairs END ----------------------------------

" git-gutter -------------------------------------------------
" Don't touch sign column colors
let g:gitgutter_override_sign_column_highlight = 0
" git-gutter END ---------------------------------------------

" groovy
au BufNewFile,BufRead Jenkinsfile setf groovy

" fatih/vim-go ----------------------------------------------

" disable fmt on autosave, use linter
let g:go_fmt_autosave = 0

" fatih/vim-go END ------------------------------------------

" tpope/vim-markdown ----------------------------------------

" vim-markdown: no folding
let g:vim_markdown_folding_disabled=1

" vim-markdown: don't indent new lines
let g:vim_markdown_new_list_item_indent = 0

" fenced highlight aliases alias=orig
let g:markdown_fenced_languages = g:vim_markdown_fenced_languages

" tpope/vim-markdown END --------------------------------------

" gabrielelana/vim-markdown
"let g:markdown_enable_spell_checking = 0 " disable spellcheck
"let g:markdown_include_jekyll_support = 0
"let g:markdown_enable_mappings = 0
"let g:markdown_enable_input_abbreviations = 0

" shime/vim-livedown
"let g:livedown_autorun = 0
"let g:livedown_open = 0

" CtrlP
let g:ctrlp_show_hidden = 1
let g:ctrlp_reuse_window  = 'startify' " fix new window split issue
let g:ctrlp_open_new_file = 'r' " open new file in current window
let g:ctrlp_working_path_mode = 0 " disable fancy working path
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn))|(tmp|node_modules|vendor)$',
  \ 'file': '\v\.(exe|so|dll|jpg|jpeg|png|swp|swo)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_bufname_mod = ':.' " show full path relative to cwd
let g:ctrlp_bufpath_mod = '' " nothing in the path section
let g:ctrlp_switch_buffer = '' " don't switch to already displayed buffers

" set custom cmd for ignoring things in gitignore (when in project root)
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" ignore everything in gitignore (regardless of project depth)
" WARNING: this bypasses ctrlp_custom_ignore and wildignore
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

" list buffers nicely
"nnoremap <C-\> :CtrlPBuffer<cr>

" ------------------------------------------------------------------------------
" vim-emoji
" ------------------------------------------------------------------------------
"let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
"let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
"let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
"let g:gitgutter_sign_modified_removed = emoji#for('collision')
set completefunc=emoji#complete

" convert :smile: to 😄
function! ConvertEmoji()
  %s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g
endfunction
command! ConvertEmoji call ConvertEmoji()
" ------------------------------------------------------------------------------
" vim-emoji END
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" FZF
" ------------------------------------------------------------------------------
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
"let g:fzf_layout = { 'down': '~40%' }
" You can set up fzf window using a Vim command (Neovim or latest Vim 8 required)
"let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
"let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Function'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

command! FZFBuffer call fzf#run({
\ 'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'),
\ 'window': 'enew'
\ })

" disable fzf preview
let g:fzf_preview_window = ''

"nnoremap <silent> <C-p> :FZF<CR>
"nnoremap <silent> <C-\> :FZFBuffer<CR>
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-\> :Buffers<CR>
" ------------------------------------------------------------------------------
" FZF END
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" vim-delve
" ------------------------------------------------------------------------------
"use horiz split
let g:delve_new_command="new"

" use vimux
let g:delve_use_vimux=1

" mtth/scratch.vim ------------------------------------------

" don't hide when you leave insert mode
"let g:scratch_insert_autohide = 0

"let g:scratch_filetype = 'markdown'

" This file gets written with the scratch content when it hides
" global
" let g:scratch_persistence_file = '/tmp/scratch.vim'
" project
"let g:scratch_persistence_file = '.scratch.vim'

" Disable mappings
"let g:scratch_no_mappings = 1
"nnoremap gs <plug>(scratch-insert-reuse)

" mtth/scratch.vim END --------------------------------------

" YCM ON EVERYTHING
"let g:ycm_filetype_blacklist = {}

" vimux bindings
"nnoremap <Leader>rp :VimuxPromptCommand<CR>
"nnoremap <Leader>rl :VimuxRunLastCommand<CR>
"nnoremap <Leader>ri :VimuxInspectRunner<CR>
"nnoremap <Leader>rx :VimuxCloseRunner<CR>
"nnoremap <Leader>rz :VimuxZoomRunner<CR>
"nnoremap <Leader>rs :VimuxInterruptRunner<CR>

" tags
"set tags=./tags

" easytags
"let g:easytags_dynamic_files = 2 " write project-specific tags
"let g:easytags_async = 1 " generate tags asynchronously

" nerdtree
"map <C-n> :NERDTreeToggle<CR>

" close if only window is nerdtree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" quit vim if no buffers
"autocmd BufDelete * if len(filter(range(1, bufnr('$')), '! empty(bufname(v:val)) && buflisted(v:val)')) == 1 | quit | endif

" startify
let g:startify_custom_header = []
let g:startify_relative_path = 1
let g:startify_list_order = ['dir', 'files', 'bookmarks', 'sessions']
let g:startify_change_to_dir = 0

" gotests-vim
let g:gotests_template="testify"

" vim-markdown-preview
"let vim_markdown_preview_github=1 " use grip disable to use markdown cli
"let vim_markdown_preview_hotkey='<C-m>'
"let vim_markdown_preview_browser='Google Chrome'
"let vim_markdown_preview_temp_file=1 " rm file after render

" buffergator
"nnoremap <silent> <Leader>b :BuffergatorToggle<CR> " toggle instead of open
"let g:buffergator_viewport_split_policy='T' " open viewport horz top
"let g:buffergator_autodismiss_on_select=1 " dismiss viewport on select
"let g:buffergator_display_regime='filepath' " view full filepath
"let g:buffergator_sort_regime='filepath' " sort on full filepath
"let g:buffergator_autoupdate=1 " update viewport when bufferlist changes (buggy)

" MiniBufExplorer --------------------------------------------

" syntastic START --------------------------------------------
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"let g:syntastic_ruby_checkers = ['mri', 'rubocop']
"let g:syntastic_go_checkers = [ 'gofmt', 'golint' ]
" syntastic END ---------------------------------------------

"###############################################################################
" utility functions
"###############################################################################
function! SystemChomp(cmd) abort
  return substitute(system(a:cmd), '\n\+$', '', '')
endfunction

function! GitCommit() abort
  return SystemChomp("git rev-parse --short HEAD")
endfunction
"###############################################################################
" utility functions END
"###############################################################################

"###############################################################################
" vim-test
"###############################################################################
"let test#strategy = "vimux"

function! DebugNearest()
  let g:test#go#runner = 'delve'
  TestNearest
  unlet g:test#go#runner
endfunction
command! DebugNearest call DebugNearest()
"###############################################################################
" vim-test END
"###############################################################################
"
"###############################################################################
" vim-fugitive
"###############################################################################
command! Gplo execute "e README.md | Git pull origin"
command -nargs=* Gl Git l <args>

function! GblameToggle()
  if &l:filetype ==# 'fugitiveblame'
    close
  else
    Git blame
  endif
endfunction
command! GblameToggle call GblameToggle()

"###############################################################################
" vim-fugitive END
"###############################################################################

" lightline --------------------------------------------------
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'component_function': {
\   'gitbranch': 'fugitive#head',
\   'gitcommit': 'GitCommit',
\ },
\ '_component': {
\   '_lineinfo': ' %3l:%-2v',
\ },
\ '_separator': { 'left': '', 'right': '' },
\ '_subseparator': { 'left': '', 'right': '' },
\ }


let g:lightline.active = {
\  'left': [ [ 'mode', 'paste' ],
\             [ 'readonly', 'filename', 'modified', 'gitbranch' ] ],
\  'right': [ ['lineinfo'],
\            [ 'percent' ],
\            [ 'fileformat', 'fileencoding', 'filetype' ],
\            ['ruler', 'linter_errors', 'linter_warnings', 'linter_ok' ] ] }

" show all the time, not just on splits
set laststatus=2
" lightline END ----------------------------------------------

" ale START -------------------------------------------------

" disable lint on text change (slow in big files)
let g:ale_lint_on_text_changed = 0
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_ruby_rubocop_executable = 'bundle exec rubocop'

" lightline-ale
let g:lightline.component_expand = {
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \ }

" resolve fight between vim-go and ale
"let g:go_fmt_fail_silently = 1

" this isn't an actual ale var, this is just a placeholder for stuff i use
" sometimes
    " pgformatter doesn't support \COPY
let g:disabled_ale_fixers = {
\   'python': ['black'],
\   'ruby': ['rufo'],
\   'sql': ['sqlint', 'pgformatter'],
\}


let g:disabled_ale_linters = {
\   'go': ['gobuild', 'govet', 'golint', 'golangci-lint'],
\}

let g:ale_linters = {
\   'go': ['gobuild', 'golangci-lint'],
\   'proto': ['buf-check-lint',],
\   'ruby': ['rails_best_practices', 'ruby', 'rubocop'],
\   'terraform': ['tflint'],
\}

" fixers
let g:ale_fixers = {
\   'lua': ['stylua'],
\   'go': ['goimports', 'gofumpt'],
\   'json': ['prettier'],
\   'terraform': ['terraform'],
\   'sql': ['pgformatter'],
\}

" lint the package, not file
let g:ale_go_golangci_lint_package = 1

" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 1

" ale convenience commands
command! ALEDisableFixers       let g:ale_fix_on_save=0
command! ALEEnableFixers        let g:ale_fix_on_save=1
command! ALEDisableFixersBuffer let b:ale_fix_on_save=0
command! ALEEnableFixersBuffer  let b:ale_fix_on_save=0

" don't autofix these filetypes
augroup ale_fixers_disabled
  autocmd!
  autocmd FileType sql,json ALEDisableFixersBuffer
augroup END
" ale END ---------------------------------------------------
"

" vim-better-whitespace (

" empty default blacklist (which contains markdown)
let g:better_whitespace_filetypes_blacklist=[]

" show tab/space fraternization
let g:show_spaces_that_precede_tabs =  1

" strip on save
let g:strip_whitespace_on_save = 1
let g:strip_whitespace_confirm = 0

" ) vim-better-whitespace

" ------------------------------------------------------------------------------
" utltisnips
" ------------------------------------------------------------------------------

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
if !exists("g:UltiSnipsSnippetDirectories")
  let g:UltiSnipsSnippetDirectories=[$HOME.'/.ultisnips',$HOME.'/.vim/bundle/vim-snippets/UltiSnips']
else
  let g:UltiSnipsSnippetDirectories=[$HOME.'/.ultisnips',$HOME.'/.vim/bundle/vim-snippets/UltiSnips']
endif


" MiniBufExplorer ------------------------------------------------------------
" Allow single clicks
"let g:miniBufExplUseSingleClick = 1

" Hide buffer numbers
"let g:miniBufExplShowBufNumbers = 0

" Place MBE window above/left. Good if using splitbelow/splitright
"let g:miniBufExplBRSplit = 0

" Show MBE when the following num of buffers are present
" 0 - skip eligible buffer checking
"let g:miniBufExplBuffersNeeded = 2

" Better colors
"hi MBENormal               ctermfg=069 guifg=#808080 guibg=fg
"hi MBEChanged              ctermfg=196 guifg=#CD5907 guibg=fg
"hi MBEVisibleNormal        ctermfg=069 guifg=#5DC2D6 guibg=fg
"hi MBEVisibleChanged       ctermfg=210 guifg=#F1266F guibg=fg
"hi MBEVisibleActiveNormal  ctermfg=046 guifg=#A6DB29 guibg=fg
"hi MBEVisibleActiveChanged ctermfg=214 guifg=#F1266F guibg=fg

" MiniBufExplorer END --------------------------------------------------------


" Commands
"          ________
"         /\       \
"        /  \       \
"       /    \       \
"      /      \_______\
"      \      /       /
"    ___\    /   ____/___
"   /\   \  /   /\       \
"  /  \   \/___/  \       \
" /    \       \   \       \
"/      \_______\   \_______\
"\      /       /   /       /
" \    /       /   /       /
"  \  /       /\  /       /
"   \/_______/  \/_______/
"
" ------------------------------------------------------------------------------
" Highlight Repeating Lines
" ------------------------------------------------------------------------------
function! HighlightRepeats() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
      let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
    endif
    let lineNum = lineNum + 1
  endwhile
  exe 'syn clear Repeat'
  for lineText in keys(lineCounts)
    if lineCounts[lineText] >= 2
      exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
    endif
  endfor
endfunction
command! -range=% HighlightRepeats <line1>,<line2>call HighlightRepeats()

" ------------------------------------------------------------------------------
" Matches - Write all search matches to a file, open that file
" ------------------------------------------------------------------------------
function! Matches()
  redir! >/tmp/matches.tmp
  g//
  redir END
  new /tmp/matches.tmp
endfunction
command! Matches <line1>,<line2>call Matches()

" ------------------------------------------------------------------------------
" rm newlines from string
" ------------------------------------------------------------------------------
function! Chomp(string)
  return substitute(a:string, '\n\+$', '', '')
endfunction

" ------------------------------------------------------------------------------
" Chomp system() call
" ------------------------------------------------------------------------------
function! ChompedSystem( ... )
    return substitute(call('system', a:000), '\n\+$', '', '')
endfunction

" ------------------------------------------------------------------------------
" Print UTC date
" ------------------------------------------------------------------------------
function! UTCDate()
  let @z = ChompedSystem('date -u \+"%Y-%m-%d"')
  normal! "zp
endfunction
command! Date call UTCDate()
command! UTCDate call UTCDate()

" ------------------------------------------------------------------------------
" Print ISO-8601 UTC datetime
" ------------------------------------------------------------------------------
function! UTCTime()
  let @z = ChompedSystem('date -u \+"%Y-%m-%dT%H:%MZ"')
  normal! "zp
endfunction
command! Time call UTCTime()
command! UTCTime call UTCTime()

" ------------------------------------------------------------------------------
" LocalDate
" ------------------------------------------------------------------------------
function! LocalDate()
  let @z = ChompedSystem('date \+"%Y-%m-%d"')
  normal! "zp
endfunction
command! LocalDate call LocalDate()

" ------------------------------------------------------------------------------
" LocalTime
" ------------------------------------------------------------------------------
function! LocalTime()
  let @z = ChompedSystem('date \+"%Y-%m-%dT%H:%M%z"')
  normal! "zp
endfunction
command! LocalTime call LocalTime()

" Map case typos
command! E e
command! W w
command! Q q
command! Qa qa

" ------------------------------------------------------------------------------
" Splits
" ------------------------------------------------------------------------------
" TODO: make this parameter-based
function! SplitSix()
  sp
  sp
  vsp
  winc k
  vsp
  winc k
  vsp
endfunction
command! SplitSix call SplitSix()

function! SplitTwoByTwo()
  sp
  vsp
  winc k
  vsp
endfunction
"command! SplitTwoByTwo call SplitTwoByTwo()
command! SplitFour call SplitTwoByTwo()

function! SplitThree()
  vsp
  sp
endfunction
command! SplitThree call SplitThree()

" ------------------------------------------------------------------------------
" MarkdownExternalLink - add link to external URL
" ------------------------------------------------------------------------------
function! MarkdownExternalLink(fetch_title)
  let l:url = input("URL: ")

  " determine if we should fetch the title or not
  if a:fetch_title
    let html_title = SystemChomp("html-title " . l:url)

    " filter out annoying patterns
     let l:html_title = substitute(l:html_title, "GitHub - ", "", "")

    let l:raw_title = l:html_title
  else
    let l:raw_title = ""
  endif

  let l:title = input("Title: ", l:raw_title)
  let l:line = printf("[%s](%s)", l:title, l:url)
  let @z = l:line
  normal! "zp

  " move to title field to fill out
  if l:title == ""
    normal F]
    startinsert
  else
    "normal o
    "startinsert
  endif
endfunction
command! MarkdownExternalLink call MarkdownExternalLink(0)
command! MarkdownExternalLinkFetchTitle call MarkdownExternalLink(1)

" ------------------------------------------------------------------------------
" MarkdownInternalLink - add link to new/existing markdown file and open
" ------------------------------------------------------------------------------
function! MarkdownInternalLink()
  let l:filename = input("Filename (no ext): ")

  if l:filename == ""
    echoerr "you must provide a filename"
  endif

  " pick the last word for the prompt
  let name_words = split(l:filename)[-1]
  let prompt_name = name_words

  let l:name = input("Friendly name (optional): ", l:prompt_name)
  if l:name == ""
    let l:name = l:filename
  endif

  let l:filename = l:filename . ".md"
  let l:line = printf("[%s](%s)", l:name, l:filename)
  let @z = l:line

  " put link
  normal! "zp

  " move cursor under filename
  normal h

  " open file using plasticboy/vim-markdown (which supports autosave)
  normal si(

  " open file classic mode
  "execute 'edit' l:filename
endfunction
command! MarkdownInternalLink call MarkdownInternalLink()

" ------------------------------------------------------------------------------
" Print filename header in markdown
" ------------------------------------------------------------------------------
function! MarkdownHeader()
  put! ='# ' . expand('%:t:r')
  normal o
  normal o
  put! ='## Resources'
  normal G
  redraw!
  startinsert
endfunction
command! MarkdownHeader call MarkdownHeader()

imap ** <Esc>:MarkdownInternalLink<CR>
imap *& <Esc>:MarkdownExternalLink<CR>
imap *( <Esc>:MarkdownExternalLinkFetchTitle<CR>
imap *^ <Esc>:call mdip#MarkdownClipboardImage()<CR>

" open in browser
nnoremap <Leader>x :MarkdownPreviewToggle<CR>

augroup filetype_markdown
  " clear out all autocmds to prevent duplicates
  autocmd!
  autocmd BufNewFile *.md MarkdownHeader
augroup END

" ------------------------------------------------------------------------------
" toggle color columns
" ------------------------------------------------------------------------------
let g:color_column_toggle = 0
function! ColorColumnToggle()
  if g:color_column_toggle
    setlocal colorcolumn=
    let g:color_column_toggle = 0
  else
    setlocal colorcolumn=1,5,9,13,17,21,80
    let g:color_column_toggle = 1
  endif
endfunction
command! ColorColumnToggle call ColorColumnToggle()

" ------------------------------------------------------------------------------
" zoom toogle
" ------------------------------------------------------------------------------
function! s:ZoomToggle() abort
    if exists('w:zoomed') && w:zoomed
        execute w:zoom_winrestcmd
        let w:zoomed = 0
    else
        let w:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let w:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()

" ------------------------------------------------------------------------------
" open directory of current file in system file browser
" uses vim-dispatch.
" ------------------------------------------------------------------------------
function! OpenDirInFileBrowser()
  let l:dir = expand("%:p:h")
  execute "Dispatch open " . l:dir
endfunction
command! OpenDirInFileBrowser call OpenDirInFileBrowser()

function! NewBuffer(str)
  execute "e " . a:str
endfunc
call toop#mapFunction('NewBuffer', 's')

" ------------------------------------------------------------------------------
" start profiling. good for tracing performance issues, debugging, etc.
" ------------------------------------------------------------------------------
function! StartProfile()
  profile start profile.log
  profile func *
  profile file *
endfunction
command! StartProfile call StartProfile()

" ------------------------------------------------------------------------------
" stop profiling and quit
" ------------------------------------------------------------------------------
function! StopProfile()
  profile pause
  noautocmd qall!
endfunction
command! StopProfile call StopProfile()

" ------------------------------------------------------------------------------
" remove file from disk and delete buffer
" ------------------------------------------------------------------------------
function! Rm()
  silent execute "! rm '%'"
  execute "BD!"
  redraw!
endfunction
command! Rm call Rm()

" ------------------------------------------------------------------------------
" Duplicate creates a copy of a file in the same directory as the original.
" ------------------------------------------------------------------------------
function! Duplicate(dstFilename)
  let l:src=expand("%:p")
  let l:dst=expand("%:p:h")."/".a:dstFilename
  let l:cmd="sav! ".l:dst
  silent execute l:cmd
  redraw!
endfunction
" :Duplicate foo.txt
command! -nargs=1 Duplicate call Duplicate(<q-args>)

" ------------------------------------------------------------------------------
" T - recursive touch
" ------------------------------------------------------------------------------
function! T(dst)
  silent execute "!t ". a:dst
  execute "e " . a:dst
  redraw! " we must redraw whenever we silence external output
endfunction
" :T foo/bar/bar.txt
command! -nargs=1 T call T(<q-args>)


" ------------------------------------------------------------------------------
" :Root | Change directory to the root of the Git repository (junegunn)
" ------------------------------------------------------------------------------
function! s:root()
  let root = systemlist('git rev-parse --show-toplevel')[0]
  if v:shell_error
    echo 'Not in git repo'
  else
    execute 'lcd' root
    echo 'Changed directory to: '.root
  endif
endfunction
command! Root call s:root()

" ------------------------------------------------------------------------------
" CdComplete | $CDPATH friendly directory changing (credit: dhruvasagar)
" ------------------------------------------------------------------------------
function! s:CdComplete(ArgLead, CmdLine, CursorPos)
  let pattern = empty(a:ArgLead) ? '*/' : '*' . a:ArgLead . '*/'
  return map(globpath(&cdpath, pattern, 1, 1), 'fnamemodify(v:val, ":h:t")')
endfunction
command! -bar -nargs=1 -complete=customlist,s:CdComplete Cd cd <args>
command! -bar -nargs=1 -complete=customlist,s:CdComplete Lcd lcd <args>


function! CdAndPull(path) abort
  execute 'cd ' . a:path
  " silence this if you want
  execute 'Gplo'
endfunction
command! -bar -nargs=1 -complete=customlist,s:CdComplete Cdp call CdAndPull(<q-args>)

" ------------------------------------------------------------------------------
" GoPkg | golang package docs/reference
" ------------------------------------------------------------------------------
function! GoPkg(pkg)
  " TODO: add github detection
  let url = "https://golang.org/pkg/" . (a:pkg)
  execute "OpenBrowser " . l:url
endfunction
command! -nargs=1 GoPkg call GoPkg(<q-args>)

" ------------------------------------------------------------------------------
" ToggleNetrw - toggle netrw
" ------------------------------------------------------------------------------
let g:NetrwIsOpen=0
function! ToggleNetrw()
  if g:NetrwIsOpen
    let i = bufnr("$")
    while (i >= 1)
      if (getbufvar(i, "&filetype") == "netrw")
        silent exe "bwipeout " . i
      endif
      let i-=1
    endwhile
    let g:NetrwIsOpen=0
  else
    let g:NetrwIsOpen=1
    silent Lexplore
  endif
endfunction
command! ToggleNetrw call ToggleNetrw()

" ------------------------------------------------------------------------------
" prettify mod_xml_cdr json file
" TODO: move to freeswitch plugin
" ------------------------------------------------------------------------------
function! CDRPrettify()
  exec '%s/,\({"core_uuid"\)/\1/g'
  PrettifyJSON
endfunction
command! CDRPrettify call CDRPrettify()

" ------------------------------------------------------------------------------
" GitPrimaryBranchName - get main or master
" ------------------------------------------------------------------------------
function! GitPrimaryBranchName()
  " check master first, flip this later
  let l:out = system("git rev-parse --abbrev-ref origin/main")

  if v:shell_error == 0
    return "main"
  else
    return "master"
  endif
endfunction
command! GitPrimaryBranchName call GitPrimaryBranchName()

" ------------------------------------------------------------------------------
" GitPrimaryURL - copy link to git repo at currrent line, master/main branch
" ------------------------------------------------------------------------------
function! GitPrimaryURL()
  silent .GBrowse!
  let l:rev_url = @*
  " replace git commit ref with primary branch name
  let l:url = substitute(l:rev_url, 'blob/[a-z0-9A-Z]\{40}/', "blob/" .  GitPrimaryBranchName() . "/", "")
  let @* = l:url
  echo l:url
endfunction
command! GitPrimaryURL call GitPrimaryURL()

" ------------------------------------------------------------------------------
" Create directory on save
" ------------------------------------------------------------------------------
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction

augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" ------------------------------------------------------------------------------
" ToggleQuickFix
" ------------------------------------------------------------------------------
function! ToggleQuickFix()
if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
else
    cclose
endif
endfunction
command! ToggleQuickFix call ToggleQuickFix()

" ------------------------------------------------------------------------------
" One-liners
" ------------------------------------------------------------------------------
command! Executable silent execute '! chmod +x %' | execute 'e!' | execute ':redraw!'
command! IndentInfo execute 'set ts? sts? sw? ex? expandtab? autoindent? smartindent?'
command! CopyBufferToClipboard execute '0,$y*'
command! PrettifyJSON execute '%!jq .'
command! UltiSnipsReload call UltiSnips#RefreshSnippets()

" dump runtimepath(s) in a pretty way
command! RuntimePathDump execute "tabnew | put =execute('echo &rtp') | %s/,/\r/g"

" copy relative path of current file to clipboard
command! RelPathToClipboard execute ':let @*=@% | echo @*'

" copy absolute path of current file to clipboard
command! AbsPathToClipboard execute ':let @*=expand("%:p") | echo expand("%:p")'

" copy relative  dir of current file to clipboard
command! RelDirToClipboard execute ':let @*=expand("%:h") | echo expand("%:h")'

" copy absolute dir of current file to clipboard
command! AbsDirToClipboard execute ':let @*=expand("%:p:h") | echo expand("%:p:h")'

" play with golang
command! GoSandbox execute ':e $GOPATH/src/github.com/dhulihan/go-sandbox/main.go'

" ------------------------------------------------------------------------------
" Colors & Highlighting
" ------------------------------------------------------------------------------
set background=dark
"colors apprentice
"colors lucius
"colors codedark
colors vim-material
"colors tokyonight
"colors iceberg "misspell is gnarly
"colors dracula
"colors falcon
"colors jellybeans
"colors hybrid
"colors molokai
"colors blackboard
"colors hemisu
"colorscheme bubblegum
"colors noctu
"colorscheme nefertiti
"colorscheme pencil
"colorscheme badwolf
"" enable transparent term support
"let g:solarized_termtrans=1
"colorscheme solarized
" ) Color Schemes

" Cross-scheme colors (dark background)
"hi clear ColorColumn
"hi ColorColumn ctermbg=237
"hi clear SignColumn
"hi clear SpellCap
"hi SpellBad ctermfg=197
"hi clear SpellBad
"hi SpellBad ctermfg=197
"hi clear LineNr
"hi LineNr ctermfg=240
"hi clear Error
"hi Error ctermfg=167
"hi clear GitGutterAdd
"hi GitGutterAdd ctermfg=118
"hi clear GitGutterChange
"hi GitGutterChange ctermfg=186
"hi clear GitGutterDelete
"hi GitGutterDelete ctermfg=1
"hi clear GitGutterChangeDelete
"hi GitGutterChangeDelete ctermfg=166

" lucius color overrides -----
"
" change default background
"hi Normal ctermbg=234 guibg=#202020
"hi Visual   term=underline ctermbg=18
"hi! VertSplit ctermfg=237 ctermbg=237
"hi! Todo term=standout ctermfg=186 cterm=bold gui=underline guifg=#e0e090
"hi! Error term=standout ctermfg=167 cterm=bold gui=underline guifg=#e37170 ctermbg=NONE
" -----

" apprentice color overrides
"hi! link SignColumn Normal
"hi! link LineNr Comment
"hi TabLine     term=bold cterm=bold ctermfg=225 ctermbg=053
"hi TabLineFill term=bold cterm=bold ctermfg=225 ctermbg=053
"hi TabLineSel  term=bold cterm=bold ctermfg=053 ctermbg=225

" old
"hi! link GitGutterAddDefault String
"hi! link GitGutterChangeDefault Function
"hi! link GitGutterDelete GitGutterDeleteDefault
"hi! link GitGutterChangeDelete GitGutterChangeDeleteDefault
"hi default GitGutterAddDefault ctermbg=234

"hi Visual   term=underline ctermbg=238
"hi NonText guifg=#4a4a59
"hi SpecialKey guifg=#4a4a59

" Colors END -----------------------------------------------
"
if filereadable(expand("~/.private-after.vim"))
  source ~/.private-after.vim
endif
